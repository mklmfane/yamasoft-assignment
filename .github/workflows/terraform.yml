name: Terraform

on:
  workflow_dispatch:
    inputs:
      do_apply:
        description: "Run full terraform apply after bootstrap"
        required: true
        default: "true"
        type: choice
        options: ["true","false"]
      do_destroy:
        description: "Run terraform destroy (manual only)"
        required: true
        default: "false"
        type: choice
        options: ["true","false"]
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: "true"
  AWS_REGION: eu-west-1

jobs:
  bootstrap:
    name: Bootstrap (create S3 state, IAM policies, OIDC)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Guard: fail early if required secrets are missing
      - name: Guard: require AWS secrets for bootstrap
        if: ${{ secrets.AWS_ACCESS_KEY_ID == '' || secrets.AWS_SECRET_ACCESS_KEY == '' }}
        run: |
          echo "ERROR: Missing repo secrets AWS_ACCESS_KEY_ID and/or AWS_SECRET_ACCESS_KEY." >&2
          echo "Add them in: Settings → Secrets and variables → Actions → New repository secret." >&2
          exit 1

      - name: Configure AWS credentials (bootstrap via access keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # optional

      - name: Verify caller identity
        run: aws sts get-caller-identity

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: false

      - name: Terraform init (local state)
        run: terraform init -backend=false -input=false

      - name: Bootstrap apply (bucket + policies + OIDC role)
        run: |
          set -euo pipefail
          terraform apply \
            -input=false \
            -auto-approve \
            -target=module.s3-bucket-state-oidc \
            -target=module.iam-tf-policies \
            -target=module.github-oidc

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Export bootstrap outputs
        id: out
        run: |
          set -euo pipefail
          tfjson=$(terraform output -json || echo '{}')

          BUCKET=$(echo "$tfjson" | jq -r '.s3_bucket_id.value // empty')
          KEY=$(echo "$tfjson" | jq -r '.backend_key.value // empty')
          USE_LOCKFILE=$(echo "$tfjson" | jq -r '.use_lockfile.value // empty')
          ROLE_ARN=$(echo "$tfjson" | jq -r '.github_oidc_role_arn.value // empty')

          [ -z "$USE_LOCKFILE" ] && USE_LOCKFILE="true"

          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
          echo "key=$KEY" >> $GITHUB_OUTPUT
          echo "use_lockfile=$USE_LOCKFILE" >> $GITHUB_OUTPUT
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT

    outputs:
      bucket:       ${{ steps.out.outputs.bucket }}
      key:          ${{ steps.out.outputs.key }}
      use_lockfile: ${{ steps.out.outputs.use_lockfile }}
      role_arn:     ${{ steps.out.outputs.role_arn }}

  deploy:
    name: Migrate backend ➜ Plan/Apply (OIDC)
    runs-on: ubuntu-latest
    needs: bootstrap
    if: ${{ needs.bootstrap.outputs.role_arn != '' }}

    env:
      TF_BACKEND_BUCKET: ${{ needs.bootstrap.outputs.bucket }}
      TF_BACKEND_KEY: ${{ needs.bootstrap.outputs.key }}
      TF_BACKEND_USE_LOCKFILE: ${{ needs.bootstrap.outputs.use_lockfile }}
      AWS_OIDC_ROLE_ARN: ${{ needs.bootstrap.outputs.role_arn }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_OIDC_ROLE_ARN }}
          role-session-name: gha-terraform

      - name: Verify caller identity (OIDC)
        run: aws sts get-caller-identity

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: false

      - name: Cache .terraform providers
        uses: actions/cache@v4
        with:
          path: |
            **/.terraform
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-tf-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tf-

      - name: Terraform fmt
        run: terraform fmt -check -recursive

      - name: Init S3 backend + migrate state (no prompts)
        run: |
          terraform init \
            -migrate-state \
            -input=false \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${TF_BACKEND_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="use_lockfile=${TF_BACKEND_USE_LOCKFILE}"

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform plan (PR)
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false -no-color -out=tfplan.bin

      - name: Upload plan (PR)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan.bin
          retention-days: 3

      - name: Terraform plan (apply path)
        if: github.event_name != 'pull_request'
        run: terraform plan -input=false -no-color

      - name: Terraform apply
        if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || inputs.do_apply == 'true')
        run: terraform apply -input=false -auto-approve

      - name: Terraform destroy (manual only)
        if: github.event_name == 'workflow_dispatch' && inputs.do_destroy == 'true'
        run: terraform destroy -input=false -auto-approve
